"""ProductPhoto columns for identation of dependency

Revision ID: ca0af79f0942
Revises: 86a8807b31ed
Create Date: 2024-07-16 12:47:14.755560

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "ca0af79f0942"
down_revision: Union[str, None] = "86a8807b31ed"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


# Define the ENUM types
product_orientation_enum = postgresql.ENUM(
    "left", "right", name="product_orientation_enum", create_type=True
)
product_type_of_platband_enum = postgresql.ENUM(
    "default",
    "L-shaped",
    name="product_type_of_platband_enum",
    create_type=True,
)


def upgrade() -> None:
    # Create the ENUM types
    product_orientation_enum.create(op.get_bind(), checkfirst=True)
    product_type_of_platband_enum.create(op.get_bind(), checkfirst=True)

    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "product_photo", sa.Column("with_glass", sa.Boolean(), nullable=True)
    )
    op.add_column(
        "product_photo",
        sa.Column(
            "orientation",
            postgresql.ENUM("LEFT", "RIGHT", name="product_orientation_enum"),
            nullable=True,
        ),
    )
    op.add_column(
        "product_photo",
        sa.Column(
            "type_of_platband",
            postgresql.ENUM(
                "DEFAULT", "L_SHAPED", name="product_type_of_platband_enum"
            ),
            nullable=True,
        ),
    )
    op.add_column(
        "product_photo", sa.Column("color_id", sa.Integer(), nullable=True)
    )
    op.add_column(
        "product_photo", sa.Column("size_id", sa.Integer(), nullable=True)
    )
    op.add_column(
        "product_photo",
        sa.Column("glass_color_id", sa.Integer(), nullable=True),
    )
    op.create_index(
        op.f("ix_product_photo_color_id"),
        "product_photo",
        ["color_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_product_photo_glass_color_id"),
        "product_photo",
        ["glass_color_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_product_photo_size_id"),
        "product_photo",
        ["size_id"],
        unique=False,
    )
    op.create_foreign_key(
        None,
        "product_photo",
        "product_size",
        ["size_id"],
        ["id"],
        onupdate="CASCADE",
        ondelete="SET NULL",
    )
    op.create_foreign_key(
        None,
        "product_photo",
        "product_color",
        ["color_id"],
        ["id"],
        onupdate="CASCADE",
        ondelete="SET NULL",
    )
    op.create_foreign_key(
        None,
        "product_photo",
        "product_glass_color",
        ["glass_color_id"],
        ["id"],
        onupdate="CASCADE",
        ondelete="SET NULL",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "product_photo", type_="foreignkey")
    op.drop_constraint(None, "product_photo", type_="foreignkey")
    op.drop_constraint(None, "product_photo", type_="foreignkey")
    op.drop_index(op.f("ix_product_photo_size_id"), table_name="product_photo")
    op.drop_index(
        op.f("ix_product_photo_glass_color_id"), table_name="product_photo"
    )
    op.drop_index(
        op.f("ix_product_photo_color_id"), table_name="product_photo"
    )
    op.drop_column("product_photo", "glass_color_id")
    op.drop_column("product_photo", "size_id")
    op.drop_column("product_photo", "color_id")
    op.drop_column("product_photo", "type_of_platband")
    op.drop_column("product_photo", "orientation")
    op.drop_column("product_photo", "with_glass")
    # ### end Alembic commands ###

    # Drop the ENUM types
    product_orientation_enum.drop(op.get_bind(), checkfirst=True)
    product_type_of_platband_enum.drop(op.get_bind(), checkfirst=True)
